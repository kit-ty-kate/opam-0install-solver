type t

type selections

type diagnostics

val create : constraints:(Cudf_types.pkgname * (Cudf_types.relop * Cudf_types.version)) list -> Cudf.universe -> t
(** [create ~constraints universe] is a solver that gets candidates from [universe], filtering them
    using [constraints]. *)

val solve : t -> Cudf_types.pkgname list -> (selections, diagnostics) result
(** [solve t package_names] finds a compatible set of package versions that
    includes all packages in [package_names] and their required dependencies. *)

val packages_of_result : selections -> (Cudf_types.pkgname * Cudf_types.version) list

val diagnostics : ?verbose:bool -> diagnostics -> string
(** [diagnostics d] is a message explaining why [d] failed, generated by
    performing another solve which doesn't abort on failure. *)
